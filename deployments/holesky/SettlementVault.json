{
  "address": "0x1865e4Fab145875b6AFf513AF496340a9a2Abb52",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "amount",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "FundsTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "amount",
          "type": "uint192"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "unlockTimestamp",
          "type": "uint64"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "unlockTimestamp",
          "type": "uint64"
        }
      ],
      "name": "ScheduledUnlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "amount",
          "type": "uint192"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TAKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionMaster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionMaster",
          "type": "address"
        }
      ],
      "name": "registerAuctionMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scheduleUnlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "amount",
          "type": "uint192"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payoutSignature",
          "type": "bytes"
        }
      ],
      "name": "takeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x31bc00714a920edfb861fb4cc6592c538fd76b39b769be156b9c4fd54cc4b571",
  "receipt": {
    "to": null,
    "from": "0x16f2Aa8dF055b6e672b93Ded41FecCCabAB565B0",
    "contractAddress": "0x1865e4Fab145875b6AFf513AF496340a9a2Abb52",
    "transactionIndex": 9,
    "gasUsed": "1399191",
    "logsBloom": "0x
    "blockHash": "0xc3696a620867585aef5fdcc14b52d7efe7adedda1cf353b34ea2ae976f76da63",
    "transactionHash": "0x31bc00714a920edfb861fb4cc6592c538fd76b39b769be156b9c4fd54cc4b571",
    "logs": [],
    "blockNumber": 2049098,
    "cumulativeGasUsed": "2336011",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ee0e0decc05bd47b4f2e676d95c15fff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FundsTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"unlockTimestamp\",\"type\":\"uint64\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"unlockTimestamp\",\"type\":\"uint64\"}],\"name\":\"ScheduledUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TAKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionMaster\",\"type\":\"address\"}],\"name\":\"registerAuctionMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payoutSignature\",\"type\":\"bytes\"}],\"name\":\"takeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SettlementVault.sol\":\"SettlementVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SettlementVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n\\nimport { AuctionPayout } from \\\"./lib/AuctionUtils.sol\\\";\\nimport \\\"./lib/SigUtils.sol\\\";\\n\\n\\ncontract SettlementVault {\\n\\n    event Locked(address indexed account, uint192 amount, uint64 unlockTimestamp);\\n    event ScheduledUnlock(address indexed account, uint64 unlockTimestamp);\\n    event Withdrawn(address indexed account, uint192 amount);\\n    event FundsTaken(address indexed account, uint192 amount, address indexed to);\\n\\n    struct AccountBalance {\\n        uint64 unlockTimestamp;\\n        uint192 balance;\\n    }\\n\\n    bytes32 public constant TAKER_ROLE = keccak256(\\\"TAKER_ROLE\\\");\\n    uint64 immutable withdrawPeriod = 1 days;\\n    mapping(address => AccountBalance) internal _balances;\\n    address immutable owner = msg.sender;\\n    address public auctionMaster;\\n\\n    function registerAuctionMaster(address _auctionMaster) external {\\n        require(auctionMaster == address(0), \\\"Auction master already set\\\");\\n        require(msg.sender == owner, \\\"Unauthorized\\\");\\n        auctionMaster = _auctionMaster;\\n    }\\n\\n    function getBalance(address account) external view returns (uint256, uint64) {\\n        return (_balances[account].balance, _balances[account].unlockTimestamp);\\n    }\\n\\n    function lock() external payable {\\n        require(msg.value > 0, \\\"Value must be greater than 0\\\");\\n        _balances[msg.sender] = AccountBalance(type(uint64).max, uint192(msg.value));\\n        emit Locked(msg.sender, uint192(msg.value), type(uint64).max);\\n    }\\n\\n    function scheduleUnlock() external {\\n        require(_balances[msg.sender].unlockTimestamp > 0, \\\"No funds locked\\\");\\n        uint64 newUnlockTimestamp = uint64(block.timestamp) + withdrawPeriod;\\n        _balances[msg.sender].unlockTimestamp = newUnlockTimestamp ;\\n        emit ScheduledUnlock(msg.sender, newUnlockTimestamp);\\n    }\\n\\n    function withdraw() external {\\n        AccountBalance memory bal = _balances[msg.sender];\\n        require(bal.unlockTimestamp <= block.timestamp, \\\"Funds are still locked\\\");\\n        _balances[msg.sender] = AccountBalance(0, 0);\\n        uint192 amount = bal.balance;\\n        _nativeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function takeFunds(address account, uint192 amount, address to, bytes memory payoutSignature) external {\\n        _verifySignature(AuctionPayout(account, amount), payoutSignature);\\n        require(_balances[account].balance >= amount, \\\"Insufficient funds\\\");\\n        unchecked { _balances[account].balance -= amount; }\\n        _nativeTransfer(msg.sender, amount);\\n        emit FundsTaken(account, amount, to);\\n    }\\n\\n    function _nativeTransfer(address to, uint192 amount) internal {\\n        (bool success,) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function _verifySignature(\\n        AuctionPayout memory payout, \\n        bytes memory signature\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encode(payout));\\n        address signer = recoverSigner(digest, signature);\\n        require(signer == auctionMaster, \\\"Invalid signature\\\");\\n    }\\n\\n}\",\"keccak256\":\"0x15f0e36f27c8aea3412f982473e1e1805ff5082ff1c8de75e93bb29ef11cbb15\",\"license\":\"MIT\"},\"contracts/lib/AuctionUtils.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\n\\ntype BidId is uint256;\\n\\nenum AuctionStatus {\\n    LIVE,\\n    CANCELLED,\\n    SETTLED\\n}\\n\\nstruct Auction {\\n    AuctionStatus status;\\n    uint128 bids;\\n    address payoutAddress;\\n    bytes32 hashedToken;\\n    uint64 until;\\n    uint64 payoutCollectionDuration;\\n    address auctioneer;\\n}\\nstruct Bid {\\n    BidId id;\\n    address bidder;\\n    uint256 amount;\\n}\\nstruct NewAuctionArgs {\\n    uint64 auctionDuration;\\n    uint64 payoutCollectionDuration;\\n    address payoutAddress;\\n}\\nstruct AuctionPayout {\\n    address account;\\n    uint amount;\\n}\\n\\nlibrary BidUtils {\\n\\n    function getBidId(uint128 auctionId, uint128 bidIndex) internal pure returns (BidId) {\\n        return BidId.wrap(uint(auctionId << 128 | bidIndex));\\n    }\\n\\n    function unpackBidId(BidId bidId) internal pure returns (uint128 auctionId, uint128 bidIndex) {\\n        auctionId = uint128(BidId.unwrap(bidId)) >> 128;\\n        bidIndex = uint128(BidId.unwrap(bidId));\\n    }\\n\\n}\",\"keccak256\":\"0x51608863a6d7bcc03da3ceba961cec45909d5150801652959e13db55d5f959fe\"},\"contracts/lib/SigUtils.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\nimport { Suave } from \\\"lib/suave-std/src/suavelib/Suave.sol\\\";\\n\\n\\nfunction getAddressForPk(string memory pk) returns (address) {\\n    bytes32 digest = keccak256(abi.encode(\\\"yo\\\"));\\n    bytes memory sig = Suave.signMessage(abi.encodePacked(digest), Suave.CryptoSignature.SECP256, pk);\\n    return recoverSigner(digest, sig);\\n}\\n\\nfunction recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) pure returns (address) {\\n    (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n    return ecrecover(_ethSignedMessageHash, v, r, s);\\n}\\n\\nfunction splitSignature(bytes memory sig) pure returns (bytes32 r, bytes32 s, uint8 v) {\\n    require(sig.length == 65, \\\"invalid signature length\\\");\\n    assembly {\\n        r := mload(add(sig, 32))\\n        s := mload(add(sig, 64))\\n        v := byte(0, mload(add(sig, 96)))\\n    }\\n    if (v < 27) {\\n        v += 27;\\n    }\\n}\",\"keccak256\":\"0x5c6b676b686f0b095f1eea08dd7c53ecbd77604913ca9d70c916b223a08775bb\"},\"lib/suave-std/src/suavelib/Suave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\n/// @notice Library to interact with the Suave MEVM precompiles.\\nlibrary Suave {\\n    error PeekerReverted(address, bytes);\\n\\n    enum CryptoSignature {\\n        SECP256,\\n        BLS\\n    }\\n\\n    type DataId is bytes16;\\n\\n    /// @notice Arguments to build the block.\\n    /// @param slot Slot number of the block\\n    /// @param proposerPubkey Public key of the proposer\\n    /// @param parent Hash of the parent block\\n    /// @param timestamp Timestamp of the block\\n    /// @param feeRecipient Address of the fee recipient\\n    /// @param gasLimit Gas limit of the block\\n    /// @param random Randomness of the block\\n    /// @param withdrawals List of withdrawals\\n    /// @param extra Extra data of the block\\n    /// @param beaconRoot Root of the beacon chain\\n    /// @param fillPending Whether to fill the block with pending transactions\\n    struct BuildBlockArgs {\\n        uint64 slot;\\n        bytes proposerPubkey;\\n        bytes32 parent;\\n        uint64 timestamp;\\n        address feeRecipient;\\n        uint64 gasLimit;\\n        bytes32 random;\\n        Withdrawal[] withdrawals;\\n        bytes extra;\\n        bytes32 beaconRoot;\\n        bool fillPending;\\n    }\\n\\n    /// @notice A record of data stored in the ConfidentialStore.\\n    /// @param id ID of the data record\\n    /// @param salt Salt used to derive the encryption key\\n    /// @param decryptionCondition Up to which block this data record is valid\\n    /// @param allowedPeekers Addresses which can get data\\n    /// @param allowedStores Addresses can set data\\n    /// @param version Namespace of the data record\\n    struct DataRecord {\\n        DataId id;\\n        DataId salt;\\n        uint64 decryptionCondition;\\n        address[] allowedPeekers;\\n        address[] allowedStores;\\n        string version;\\n    }\\n\\n    /// @notice Description of an HTTP request.\\n    /// @param url Target url of the request\\n    /// @param method HTTP method of the request\\n    /// @param headers HTTP Headers\\n    /// @param body Body of the request (if Post or Put)\\n    /// @param withFlashbotsSignature Whether to include the Flashbots signature\\n    /// @param timeout Timeout of the request in milliseconds\\n    struct HttpRequest {\\n        string url;\\n        string method;\\n        string[] headers;\\n        bytes body;\\n        bool withFlashbotsSignature;\\n        uint64 timeout;\\n    }\\n\\n    /// @notice Result of a simulated transaction.\\n    /// @param egp Effective Gas Price of the transaction\\n    /// @param logs Logs emitted during the simulation\\n    /// @param success Whether the transaction was successful or not\\n    /// @param error Error message if any\\n    struct SimulateTransactionResult {\\n        uint64 egp;\\n        SimulatedLog[] logs;\\n        bool success;\\n        string error;\\n    }\\n\\n    /// @notice A log emitted during the simulation of a transaction.\\n    /// @param data Data of the log\\n    /// @param addr Address of the contract that emitted the log\\n    /// @param topics Topics of the log\\n    struct SimulatedLog {\\n        bytes data;\\n        address addr;\\n        bytes32[] topics;\\n    }\\n\\n    /// @notice A withdrawal from the beacon chain.\\n    /// @param index Index of the withdrawal\\n    /// @param validator ID of the validator\\n    /// @param Address Address to withdraw to\\n    /// @param amount Amount to be withdrawn\\n    struct Withdrawal {\\n        uint64 index;\\n        uint64 validator;\\n        address Address;\\n        uint64 amount;\\n    }\\n\\n    address public constant ANYALLOWED = 0xC8df3686b4Afb2BB53e60EAe97EF043FE03Fb829;\\n\\n    address public constant IS_CONFIDENTIAL_ADDR = 0x0000000000000000000000000000000042010000;\\n\\n    address public constant BUILD_ETH_BLOCK = 0x0000000000000000000000000000000042100001;\\n\\n    address public constant BUILD_ETH_BLOCK_TO = 0x0000000000000000000000000000000042100006;\\n\\n    address public constant CONFIDENTIAL_INPUTS = 0x0000000000000000000000000000000042010001;\\n\\n    address public constant CONFIDENTIAL_RETRIEVE = 0x0000000000000000000000000000000042020001;\\n\\n    address public constant CONFIDENTIAL_STORE = 0x0000000000000000000000000000000042020000;\\n\\n    address public constant CONTEXT_GET = 0x0000000000000000000000000000000053300003;\\n\\n    address public constant DO_HTTPREQUEST = 0x0000000000000000000000000000000043200002;\\n\\n    address public constant ETHCALL = 0x0000000000000000000000000000000042100003;\\n\\n    address public constant EXTRACT_HINT = 0x0000000000000000000000000000000042100037;\\n\\n    address public constant FETCH_DATA_RECORDS = 0x0000000000000000000000000000000042030001;\\n\\n    address public constant FILL_MEV_SHARE_BUNDLE = 0x0000000000000000000000000000000043200001;\\n\\n    address public constant NEW_BUILDER = 0x0000000000000000000000000000000053200001;\\n\\n    address public constant NEW_DATA_RECORD = 0x0000000000000000000000000000000042030000;\\n\\n    address public constant PRIVATE_KEY_GEN = 0x0000000000000000000000000000000053200003;\\n\\n    address public constant RANDOM_BYTES = 0x000000000000000000000000000000007770000b;\\n\\n    address public constant SIGN_ETH_TRANSACTION = 0x0000000000000000000000000000000040100001;\\n\\n    address public constant SIGN_MESSAGE = 0x0000000000000000000000000000000040100003;\\n\\n    address public constant SIMULATE_BUNDLE = 0x0000000000000000000000000000000042100000;\\n\\n    address public constant SIMULATE_TRANSACTION = 0x0000000000000000000000000000000053200002;\\n\\n    address public constant SUBMIT_BUNDLE_JSON_RPC = 0x0000000000000000000000000000000043000001;\\n\\n    address public constant SUBMIT_ETH_BLOCK_TO_RELAY = 0x0000000000000000000000000000000042100002;\\n\\n    /// @notice Returns whether execution is off- or on-chain\\n    /// @return b Whether execution is off- or on-chain\\n    function isConfidential() internal returns (bool b) {\\n        (bool success, bytes memory isConfidentialBytes) = IS_CONFIDENTIAL_ADDR.call(\\\"\\\");\\n        if (!success) {\\n            revert PeekerReverted(IS_CONFIDENTIAL_ADDR, isConfidentialBytes);\\n        }\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(isConfidentialBytes)\\n            // Load the data after 32 bytes, so add 0x20\\n            b := mload(add(isConfidentialBytes, 0x20))\\n        }\\n    }\\n\\n    /// @notice Constructs an Ethereum block based on the provided data records. No blobs are returned.\\n    /// @param blockArgs Arguments to build the block\\n    /// @param dataId ID of the data record with mev-share bundle data\\n    /// @param relayUrl If specified the built block will be submitted to the relay\\n    /// @return blockBid Block Bid encoded in JSON\\n    /// @return executionPayload Execution payload encoded in JSON\\n    function buildEthBlock(BuildBlockArgs memory blockArgs, DataId dataId, string memory relayUrl)\\n        internal\\n        returns (bytes memory, bytes memory)\\n    {\\n        (bool success, bytes memory data) = BUILD_ETH_BLOCK.call(abi.encode(blockArgs, dataId, relayUrl));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    /// @notice Constructs an Ethereum block based on the provided data records. No blobs are returned.\\n    /// @param executionNodeURL URL (or service name) of the execution node\\n    /// @param blockArgs Arguments to build the block\\n    /// @param dataId ID of the data record with mev-share bundle data\\n    /// @param relayUrl If specified the built block will be submitted to the relay\\n    /// @return blockBid Block Bid encoded in JSON\\n    /// @return executionPayload Execution payload encoded in JSON\\n    function buildEthBlockTo(\\n        string memory executionNodeURL,\\n        BuildBlockArgs memory blockArgs,\\n        DataId dataId,\\n        string memory relayUrl\\n    ) internal returns (bytes memory, bytes memory) {\\n        (bool success, bytes memory data) =\\n            BUILD_ETH_BLOCK_TO.call(abi.encode(executionNodeURL, blockArgs, dataId, relayUrl));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK_TO, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    /// @notice Provides the confidential inputs associated with a confidential computation request. Outputs are in bytes format.\\n    /// @return confindentialData Confidential inputs\\n    function confidentialInputs() internal returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_INPUTS.call(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_INPUTS, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    /// @notice Retrieves data from the confidential store. Also mandates the caller's presence in the `AllowedPeekers` list.\\n    /// @param dataId ID of the data record to retrieve\\n    /// @param key Key slot of the data to retrieve\\n    /// @return value Value of the data\\n    function confidentialRetrieve(DataId dataId, string memory key) internal returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_RETRIEVE.call(abi.encode(dataId, key));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_RETRIEVE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    /// @notice Stores data in the confidential store. Requires the caller to be part of the `AllowedPeekers` for the associated data record.\\n    /// @param dataId ID of the data record to store\\n    /// @param key Key slot of the data to store\\n    /// @param value Value of the data to store\\n    function confidentialStore(DataId dataId, string memory key, bytes memory value) internal {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE.call(abi.encode(dataId, key, value));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE, data);\\n        }\\n    }\\n\\n    /// @notice Retrieves a value from the context\\n    /// @param key Key of the value to retrieve\\n    /// @return value Value of the key\\n    function contextGet(string memory key) internal returns (bytes memory) {\\n        (bool success, bytes memory data) = CONTEXT_GET.call(abi.encode(key));\\n        if (!success) {\\n            revert PeekerReverted(CONTEXT_GET, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    /// @notice Performs an HTTP request and returns the response. `request` is the request to perform.\\n    /// @param request Request to perform\\n    /// @return httpResponse Body of the response\\n    function doHTTPRequest(HttpRequest memory request) internal returns (bytes memory) {\\n        (bool success, bytes memory data) = DO_HTTPREQUEST.call(abi.encode(request));\\n        if (!success) {\\n            revert PeekerReverted(DO_HTTPREQUEST, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    /// @notice Uses the `eth_call` JSON RPC method to let you simulate a function call and return the response.\\n    /// @param contractAddr Address of the contract to call\\n    /// @param input1 Data to send to the contract\\n    /// @return callOutput Output of the contract call\\n    function ethcall(address contractAddr, bytes memory input1) internal returns (bytes memory) {\\n        (bool success, bytes memory data) = ETHCALL.call(abi.encode(contractAddr, input1));\\n        if (!success) {\\n            revert PeekerReverted(ETHCALL, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    /// @notice Interprets the bundle data and extracts hints, such as the `To` address and calldata.\\n    /// @param bundleData Bundle object encoded in JSON\\n    /// @return hints List of hints encoded in JSON\\n    function extractHint(bytes memory bundleData) internal returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = EXTRACT_HINT.call(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(EXTRACT_HINT, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    /// @notice Retrieves all data records correlating with a specified decryption condition and namespace\\n    /// @param cond Filter for the decryption condition\\n    /// @param namespace Filter for the namespace of the data records\\n    /// @return dataRecords List of data records that match the filter\\n    function fetchDataRecords(uint64 cond, string memory namespace) internal returns (DataRecord[] memory) {\\n        (bool success, bytes memory data) = FETCH_DATA_RECORDS.call(abi.encode(cond, namespace));\\n        if (!success) {\\n            revert PeekerReverted(FETCH_DATA_RECORDS, data);\\n        }\\n\\n        return abi.decode(data, (DataRecord[]));\\n    }\\n\\n    /// @notice Joins the user's transaction and with the backrun, and returns encoded mev-share bundle. The bundle is ready to be sent via `SubmitBundleJsonRPC`.\\n    /// @param dataId ID of the data record with mev-share bundle data\\n    /// @return encodedBundle Mev-Share bundle encoded in JSON\\n    function fillMevShareBundle(DataId dataId) internal returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = FILL_MEV_SHARE_BUNDLE.call(abi.encode(dataId));\\n        if (!success) {\\n            revert PeekerReverted(FILL_MEV_SHARE_BUNDLE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    /// @notice Initializes a new remote builder session\\n    /// @return sessionid ID of the remote builder session\\n    function newBuilder() internal returns (string memory) {\\n        (bool success, bytes memory data) = NEW_BUILDER.call(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(NEW_BUILDER, data);\\n        }\\n\\n        return abi.decode(data, (string));\\n    }\\n\\n    /// @notice Initializes data records within the ConfidentialStore. Prior to storing data, all data records should undergo initialization via this precompile.\\n    /// @param decryptionCondition Up to which block this data record is valid. Used during `fillMevShareBundle` precompie.\\n    /// @param allowedPeekers Addresses which can get data\\n    /// @param allowedStores Addresses can set data\\n    /// @param dataType Namespace of the data\\n    /// @return dataRecord Data record that was created\\n    function newDataRecord(\\n        uint64 decryptionCondition,\\n        address[] memory allowedPeekers,\\n        address[] memory allowedStores,\\n        string memory dataType\\n    ) internal returns (DataRecord memory) {\\n        (bool success, bytes memory data) =\\n            NEW_DATA_RECORD.call(abi.encode(decryptionCondition, allowedPeekers, allowedStores, dataType));\\n        if (!success) {\\n            revert PeekerReverted(NEW_DATA_RECORD, data);\\n        }\\n\\n        return abi.decode(data, (DataRecord));\\n    }\\n\\n    /// @notice Generates a private key in ECDA secp256k1 format\\n    /// @param crypto Type of the private key to generate\\n    /// @return privateKey Hex encoded string of the ECDSA private key. Exactly as a signMessage precompile wants.\\n    function privateKeyGen(CryptoSignature crypto) internal returns (string memory) {\\n        (bool success, bytes memory data) = PRIVATE_KEY_GEN.call(abi.encode(crypto));\\n        if (!success) {\\n            revert PeekerReverted(PRIVATE_KEY_GEN, data);\\n        }\\n\\n        return abi.decode(data, (string));\\n    }\\n\\n    /// @notice Generates a number of random bytes, given by the argument numBytes.\\n    /// @param numBytes Number of random bytes to generate\\n    /// @return value Randomly-generated bytes\\n    function randomBytes(uint8 numBytes) internal returns (bytes memory) {\\n        (bool success, bytes memory data) = RANDOM_BYTES.call(abi.encode(numBytes));\\n        if (!success) {\\n            revert PeekerReverted(RANDOM_BYTES, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    /// @notice Signs an Ethereum Transaction, 1559 or Legacy, and returns raw signed transaction bytes. `txn` is binary encoding of the transaction.\\n    /// @param txn Transaction to sign (RLP encoded)\\n    /// @param chainId Id of the chain to sign for (hex encoded, with 0x prefix)\\n    /// @param signingKey Hex encoded string of the ECDSA private key (without 0x prefix)\\n    /// @return signedTxn Signed transaction encoded in RLP\\n    function signEthTransaction(bytes memory txn, string memory chainId, string memory signingKey)\\n        internal\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory data) = SIGN_ETH_TRANSACTION.call(abi.encode(txn, chainId, signingKey));\\n        if (!success) {\\n            revert PeekerReverted(SIGN_ETH_TRANSACTION, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    /// @notice Signs a message and returns the signature.\\n    /// @param digest Message to sign\\n    /// @param crypto Type of the private key to generate\\n    /// @param signingKey Hex encoded string of the ECDSA private key\\n    /// @return signature Signature of the message with the private key\\n    function signMessage(bytes memory digest, CryptoSignature crypto, string memory signingKey)\\n        internal\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SIGN_MESSAGE.call(abi.encode(digest, crypto, signingKey));\\n        if (!success) {\\n            revert PeekerReverted(SIGN_MESSAGE, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    /// @notice Performs a simulation of the bundle by building a block that includes it.\\n    /// @param bundleData Bundle encoded in JSON\\n    /// @return effectiveGasPrice Effective Gas Price of the resultant block\\n    function simulateBundle(bytes memory bundleData) internal returns (uint64) {\\n        (bool success, bytes memory data) = SIMULATE_BUNDLE.call(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_BUNDLE, data);\\n        }\\n\\n        return abi.decode(data, (uint64));\\n    }\\n\\n    /// @notice Simulates a transaction on a remote builder session\\n    /// @param sessionid ID of the remote builder session\\n    /// @param txn Txn to simulate encoded in RLP\\n    /// @return simulationResult Result of the simulation\\n    function simulateTransaction(string memory sessionid, bytes memory txn)\\n        internal\\n        returns (SimulateTransactionResult memory)\\n    {\\n        (bool success, bytes memory data) = SIMULATE_TRANSACTION.call(abi.encode(sessionid, txn));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_TRANSACTION, data);\\n        }\\n\\n        return abi.decode(data, (SimulateTransactionResult));\\n    }\\n\\n    /// @notice Submits bytes as JSONRPC message to the specified URL with the specified method. As this call is intended for bundles, it also signs the params and adds `X-Flashbots-Signature` header, as usual with bundles. Regular eth bundles don't need any processing to be sent.\\n    /// @param url URL to send the request to\\n    /// @param method JSONRPC method to call\\n    /// @param params JSONRPC input params encoded in RLP\\n    /// @return errorMessage Error message if any\\n    function submitBundleJsonRPC(string memory url, string memory method, bytes memory params)\\n        internal\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_BUNDLE_JSON_RPC.call(abi.encode(url, method, params));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_BUNDLE_JSON_RPC, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    /// @notice Submits a given builderBid to a mev-boost relay.\\n    /// @param relayUrl URL of the relay to submit to\\n    /// @param builderBid Block bid to submit encoded in JSON\\n    /// @return blockBid Error message if any\\n    function submitEthBlockToRelay(string memory relayUrl, bytes memory builderBid) internal returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_ETH_BLOCK_TO_RELAY.call(abi.encode(relayUrl, builderBid));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_ETH_BLOCK_TO_RELAY, data);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x3cd3eda525d8403668553d130780ecdca2bdee28bb82cc58a7c138c849409f9f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040526201518067ffffffffffffffff1660809067ffffffffffffffff168152503373ffffffffffffffffffffffffffffffffffffffff1660a09073ffffffffffffffffffffffffffffffffffffffff1681525034801561006157600080fd5b5060805160a05161186d61008760003960006104e8015260006108ae015261186d6000f3fe60806040526004361061007b5760003560e01c8063ea477dc81161004e578063ea477dc814610114578063f65de94a1461012b578063f83d08ba14610156578063f8b2cb4f146101605761007b565b80633ccfd60b146100805780634ca89c2c14610097578063ae5cf1d5146100c2578063e0b0020f146100eb575b600080fd5b34801561008c57600080fd5b5061009561019e565b005b3480156100a357600080fd5b506100ac61042f565b6040516100b99190610eff565b60405180910390f35b3480156100ce57600080fd5b506100e960048036038101906100e49190610f5a565b610455565b005b3480156100f757600080fd5b50610112600480360381019061010d919061111d565b6105b8565b005b34801561012057600080fd5b50610129610808565b005b34801561013757600080fd5b50610140610993565b60405161014d91906111b9565b60405180910390f35b61015e6109b7565b005b34801561016c57600080fd5b5061018760048036038101906101829190610f5a565b610b4c565b604051610195929190611210565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681525050905042816000015167ffffffffffffffff1611156102d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c790611296565b60405180910390fd5b6040518060400160405280600067ffffffffffffffff168152602001600077ffffffffffffffffffffffffffffffffffffffffffffffff168152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055509050506000816020015190506103dd3382610c31565b3373ffffffffffffffffffffffffffffffffffffffff167f47cf194f5e559cca0413017d38814a7843cc6f3052bc43c8085938774ae581518260405161042391906112c5565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd9061132c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b90611398565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61060660405180604001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018577ffffffffffffffffffffffffffffffffffffffffffffffff1681525082610cfc565b8277ffffffffffffffffffffffffffffffffffffffffffffffff166000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1610156106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d990611404565b60405180910390fd5b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160088282829054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff160392506101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555061079d3384610c31565b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc180277adfd769578ae3840b13fbf8e72d19aea1d030435da520e3f2285e527e856040516107fa91906112c5565b60405180910390a350505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16116108aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a190611470565b60405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000426108d891906114bf565b9050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1e4d7daa55eb36e3f003920d231b23fe4fa76d7d5e83328d8b5a13217f7486278260405161098891906114fd565b60405180910390a250565b7f508ee82d0bdf04e000303ab4f02b172e60c5f2d35b2e559b05bed2cf403bb58b81565b600034116109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190611564565b60405180910390fd5b604051806040016040528067ffffffffffffffff801681526020013477ffffffffffffffffffffffffffffffffffffffffffffffff168152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff167f46e0212fcc31845d59d15ee73a636453da2ae166a6fa17347997e4e9c580c3163467ffffffffffffffff604051610b42929190611584565b60405180910390a2565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff166000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff168177ffffffffffffffffffffffffffffffffffffffffffffffff16915091509150915091565b60008273ffffffffffffffffffffffffffffffffffffffff168277ffffffffffffffffffffffffffffffffffffffffffffffff16604051610c71906115de565b60006040518083038185875af1925050503d8060008114610cae576040519150601f19603f3d011682016040523d82523d6000602084013e610cb3565b606091505b5050905080610cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cee9061163f565b60405180910390fd5b505050565b600082604051602001610d0f91906116ac565b6040516020818303038152906040528051906020012090506000610d338284610dcb565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbc90611713565b60405180910390fd5b50505050565b600080600080610dda85610e3a565b92509250925060018682858560405160008152602001604052604051610e03949392919061174f565b6020604051602081039080840390855afa158015610e25573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60008060006041845114610e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7a906117e0565b60405180910390fd5b6020840151925060408401519150606084015160001a9050601b8160ff161015610eb757601b81610eb49190611800565b90505b9193909250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ee982610ebe565b9050919050565b610ef981610ede565b82525050565b6000602082019050610f146000830184610ef0565b92915050565b6000604051905090565b600080fd5b600080fd5b610f3781610ede565b8114610f4257600080fd5b50565b600081359050610f5481610f2e565b92915050565b600060208284031215610f7057610f6f610f24565b5b6000610f7e84828501610f45565b91505092915050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b610fb481610f87565b8114610fbf57600080fd5b50565b600081359050610fd181610fab565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61102a82610fe1565b810181811067ffffffffffffffff8211171561104957611048610ff2565b5b80604052505050565b600061105c610f1a565b90506110688282611021565b919050565b600067ffffffffffffffff82111561108857611087610ff2565b5b61109182610fe1565b9050602081019050919050565b82818337600083830152505050565b60006110c06110bb8461106d565b611052565b9050828152602081018484840111156110dc576110db610fdc565b5b6110e784828561109e565b509392505050565b600082601f83011261110457611103610fd7565b5b81356111148482602086016110ad565b91505092915050565b6000806000806080858703121561113757611136610f24565b5b600061114587828801610f45565b945050602061115687828801610fc2565b935050604061116787828801610f45565b925050606085013567ffffffffffffffff81111561118857611187610f29565b5b611194878288016110ef565b91505092959194509250565b6000819050919050565b6111b3816111a0565b82525050565b60006020820190506111ce60008301846111aa565b92915050565b6000819050919050565b6111e7816111d4565b82525050565b600067ffffffffffffffff82169050919050565b61120a816111ed565b82525050565b600060408201905061122560008301856111de565b6112326020830184611201565b9392505050565b600082825260208201905092915050565b7f46756e647320617265207374696c6c206c6f636b656400000000000000000000600082015250565b6000611280601683611239565b915061128b8261124a565b602082019050919050565b600060208201905081810360008301526112af81611273565b9050919050565b6112bf81610f87565b82525050565b60006020820190506112da60008301846112b6565b92915050565b7f41756374696f6e206d617374657220616c726561647920736574000000000000600082015250565b6000611316601a83611239565b9150611321826112e0565b602082019050919050565b6000602082019050818103600083015261134581611309565b9050919050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b6000611382600c83611239565b915061138d8261134c565b602082019050919050565b600060208201905081810360008301526113b181611375565b9050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b60006113ee601283611239565b91506113f9826113b8565b602082019050919050565b6000602082019050818103600083015261141d816113e1565b9050919050565b7f4e6f2066756e6473206c6f636b65640000000000000000000000000000000000600082015250565b600061145a600f83611239565b915061146582611424565b602082019050919050565b600060208201905081810360008301526114898161144d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114ca826111ed565b91506114d5836111ed565b92508267ffffffffffffffff038211156114f2576114f1611490565b5b828201905092915050565b60006020820190506115126000830184611201565b92915050565b7f56616c7565206d7573742062652067726561746572207468616e203000000000600082015250565b600061154e601c83611239565b915061155982611518565b602082019050919050565b6000602082019050818103600083015261157d81611541565b9050919050565b600060408201905061159960008301856112b6565b6115a66020830184611201565b9392505050565b600081905092915050565b50565b60006115c86000836115ad565b91506115d3826115b8565b600082019050919050565b60006115e9826115bb565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000611629600f83611239565b9150611634826115f3565b602082019050919050565b600060208201905081810360008301526116588161161c565b9050919050565b61166881610ede565b82525050565b611677816111d4565b82525050565b604082016000820151611693600085018261165f565b5060208201516116a6602085018261166e565b50505050565b60006040820190506116c1600083018461167d565b92915050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b60006116fd601183611239565b9150611708826116c7565b602082019050919050565b6000602082019050818103600083015261172c816116f0565b9050919050565b600060ff82169050919050565b61174981611733565b82525050565b600060808201905061176460008301876111aa565b6117716020830186611740565b61177e60408301856111aa565b61178b60608301846111aa565b95945050505050565b7f696e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b60006117ca601883611239565b91506117d582611794565b602082019050919050565b600060208201905081810360008301526117f9816117bd565b9050919050565b600061180b82611733565b915061181683611733565b92508260ff0382111561182c5761182b611490565b5b82820190509291505056fea2646970667358221220d3c348575a7df21f3b42d9d466eda4d02cf90be900db4e0eaabcc90199eece0564736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063ea477dc81161004e578063ea477dc814610114578063f65de94a1461012b578063f83d08ba14610156578063f8b2cb4f146101605761007b565b80633ccfd60b146100805780634ca89c2c14610097578063ae5cf1d5146100c2578063e0b0020f146100eb575b600080fd5b34801561008c57600080fd5b5061009561019e565b005b3480156100a357600080fd5b506100ac61042f565b6040516100b99190610eff565b60405180910390f35b3480156100ce57600080fd5b506100e960048036038101906100e49190610f5a565b610455565b005b3480156100f757600080fd5b50610112600480360381019061010d919061111d565b6105b8565b005b34801561012057600080fd5b50610129610808565b005b34801561013757600080fd5b50610140610993565b60405161014d91906111b9565b60405180910390f35b61015e6109b7565b005b34801561016c57600080fd5b5061018760048036038101906101829190610f5a565b610b4c565b604051610195929190611210565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681525050905042816000015167ffffffffffffffff1611156102d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c790611296565b60405180910390fd5b6040518060400160405280600067ffffffffffffffff168152602001600077ffffffffffffffffffffffffffffffffffffffffffffffff168152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055509050506000816020015190506103dd3382610c31565b3373ffffffffffffffffffffffffffffffffffffffff167f47cf194f5e559cca0413017d38814a7843cc6f3052bc43c8085938774ae581518260405161042391906112c5565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd9061132c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b90611398565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61060660405180604001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018577ffffffffffffffffffffffffffffffffffffffffffffffff1681525082610cfc565b8277ffffffffffffffffffffffffffffffffffffffffffffffff166000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1610156106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d990611404565b60405180910390fd5b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160088282829054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff160392506101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555061079d3384610c31565b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc180277adfd769578ae3840b13fbf8e72d19aea1d030435da520e3f2285e527e856040516107fa91906112c5565b60405180910390a350505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16116108aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a190611470565b60405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000426108d891906114bf565b9050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1e4d7daa55eb36e3f003920d231b23fe4fa76d7d5e83328d8b5a13217f7486278260405161098891906114fd565b60405180910390a250565b7f508ee82d0bdf04e000303ab4f02b172e60c5f2d35b2e559b05bed2cf403bb58b81565b600034116109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190611564565b60405180910390fd5b604051806040016040528067ffffffffffffffff801681526020013477ffffffffffffffffffffffffffffffffffffffffffffffff168152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff167f46e0212fcc31845d59d15ee73a636453da2ae166a6fa17347997e4e9c580c3163467ffffffffffffffff604051610b42929190611584565b60405180910390a2565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff166000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff168177ffffffffffffffffffffffffffffffffffffffffffffffff16915091509150915091565b60008273ffffffffffffffffffffffffffffffffffffffff168277ffffffffffffffffffffffffffffffffffffffffffffffff16604051610c71906115de565b60006040518083038185875af1925050503d8060008114610cae576040519150601f19603f3d011682016040523d82523d6000602084013e610cb3565b606091505b5050905080610cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cee9061163f565b60405180910390fd5b505050565b600082604051602001610d0f91906116ac565b6040516020818303038152906040528051906020012090506000610d338284610dcb565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbc90611713565b60405180910390fd5b50505050565b600080600080610dda85610e3a565b92509250925060018682858560405160008152602001604052604051610e03949392919061174f565b6020604051602081039080840390855afa158015610e25573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60008060006041845114610e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7a906117e0565b60405180910390fd5b6020840151925060408401519150606084015160001a9050601b8160ff161015610eb757601b81610eb49190611800565b90505b9193909250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ee982610ebe565b9050919050565b610ef981610ede565b82525050565b6000602082019050610f146000830184610ef0565b92915050565b6000604051905090565b600080fd5b600080fd5b610f3781610ede565b8114610f4257600080fd5b50565b600081359050610f5481610f2e565b92915050565b600060208284031215610f7057610f6f610f24565b5b6000610f7e84828501610f45565b91505092915050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b610fb481610f87565b8114610fbf57600080fd5b50565b600081359050610fd181610fab565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61102a82610fe1565b810181811067ffffffffffffffff8211171561104957611048610ff2565b5b80604052505050565b600061105c610f1a565b90506110688282611021565b919050565b600067ffffffffffffffff82111561108857611087610ff2565b5b61109182610fe1565b9050602081019050919050565b82818337600083830152505050565b60006110c06110bb8461106d565b611052565b9050828152602081018484840111156110dc576110db610fdc565b5b6110e784828561109e565b509392505050565b600082601f83011261110457611103610fd7565b5b81356111148482602086016110ad565b91505092915050565b6000806000806080858703121561113757611136610f24565b5b600061114587828801610f45565b945050602061115687828801610fc2565b935050604061116787828801610f45565b925050606085013567ffffffffffffffff81111561118857611187610f29565b5b611194878288016110ef565b91505092959194509250565b6000819050919050565b6111b3816111a0565b82525050565b60006020820190506111ce60008301846111aa565b92915050565b6000819050919050565b6111e7816111d4565b82525050565b600067ffffffffffffffff82169050919050565b61120a816111ed565b82525050565b600060408201905061122560008301856111de565b6112326020830184611201565b9392505050565b600082825260208201905092915050565b7f46756e647320617265207374696c6c206c6f636b656400000000000000000000600082015250565b6000611280601683611239565b915061128b8261124a565b602082019050919050565b600060208201905081810360008301526112af81611273565b9050919050565b6112bf81610f87565b82525050565b60006020820190506112da60008301846112b6565b92915050565b7f41756374696f6e206d617374657220616c726561647920736574000000000000600082015250565b6000611316601a83611239565b9150611321826112e0565b602082019050919050565b6000602082019050818103600083015261134581611309565b9050919050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b6000611382600c83611239565b915061138d8261134c565b602082019050919050565b600060208201905081810360008301526113b181611375565b9050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b60006113ee601283611239565b91506113f9826113b8565b602082019050919050565b6000602082019050818103600083015261141d816113e1565b9050919050565b7f4e6f2066756e6473206c6f636b65640000000000000000000000000000000000600082015250565b600061145a600f83611239565b915061146582611424565b602082019050919050565b600060208201905081810360008301526114898161144d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114ca826111ed565b91506114d5836111ed565b92508267ffffffffffffffff038211156114f2576114f1611490565b5b828201905092915050565b60006020820190506115126000830184611201565b92915050565b7f56616c7565206d7573742062652067726561746572207468616e203000000000600082015250565b600061154e601c83611239565b915061155982611518565b602082019050919050565b6000602082019050818103600083015261157d81611541565b9050919050565b600060408201905061159960008301856112b6565b6115a66020830184611201565b9392505050565b600081905092915050565b50565b60006115c86000836115ad565b91506115d3826115b8565b600082019050919050565b60006115e9826115bb565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000611629600f83611239565b9150611634826115f3565b602082019050919050565b600060208201905081810360008301526116588161161c565b9050919050565b61166881610ede565b82525050565b611677816111d4565b82525050565b604082016000820151611693600085018261165f565b5060208201516116a6602085018261166e565b50505050565b60006040820190506116c1600083018461167d565b92915050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b60006116fd601183611239565b9150611708826116c7565b602082019050919050565b6000602082019050818103600083015261172c816116f0565b9050919050565b600060ff82169050919050565b61174981611733565b82525050565b600060808201905061176460008301876111aa565b6117716020830186611740565b61177e60408301856111aa565b61178b60608301846111aa565b95945050505050565b7f696e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b60006117ca601883611239565b91506117d582611794565b602082019050919050565b600060208201905081810360008301526117f9816117bd565b9050919050565b600061180b82611733565b915061181683611733565b92508260ff0382111561182c5761182b611490565b5b82820190509291505056fea2646970667358221220d3c348575a7df21f3b42d9d466eda4d02cf90be900db4e0eaabcc90199eece0564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/SettlementVault.sol:SettlementVault",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(AccountBalance)37_storage)"
      },
      {
        "astId": 56,
        "contract": "contracts/SettlementVault.sol:SettlementVault",
        "label": "auctionMaster",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AccountBalance)37_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SettlementVault.AccountBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountBalance)37_storage"
      },
      "t_struct(AccountBalance)37_storage": {
        "encoding": "inplace",
        "label": "struct SettlementVault.AccountBalance",
        "members": [
          {
            "astId": 34,
            "contract": "contracts/SettlementVault.sol:SettlementVault",
            "label": "unlockTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 36,
            "contract": "contracts/SettlementVault.sol:SettlementVault",
            "label": "balance",
            "offset": 8,
            "slot": "0",
            "type": "t_uint192"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}